{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\el\\xEDsabet\\\\Documents\\\\web-dev\\\\react\\\\react_final_exam\\\\client\\\\src\\\\auth\\\\isAuthorized.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst isAuthorized = ComponentToWrap => props => {\n  const [isLoggedIn, setLoginStatus] = useState(false);\n  const [userID, setUserID] = useState();\n  useEffect(() => {\n    let isFetching = true;\n\n    const fetchOnlineUser = async () => {\n      try {\n        const response = await axios.get(\"http://localhost/auth\");\n\n        if (isFetching) {\n          setLoginStatus(true);\n          setUserID(response.data.response);\n        }\n      } catch (err) {\n        if (err) {\n          console.log(err.response.data.error);\n        }\n      }\n    };\n\n    fetchOnlineUser();\n    return () => isFetching = false; //unsubscribe\n  }, []);\n  return /*#__PURE__*/React.createElement(ComponentToWrap, Object.assign({\n    isAuthorized: isLoggedIn,\n    userID: userID\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default isAuthorized;","map":{"version":3,"sources":["C:/Users/elÃ­sabet/Documents/web-dev/react/react_final_exam/client/src/auth/isAuthorized.js"],"names":["React","useState","useEffect","axios","isAuthorized","ComponentToWrap","props","isLoggedIn","setLoginStatus","userID","setUserID","isFetching","fetchOnlineUser","response","get","data","err","console","log","error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,YAAY,GAAGC,eAAe,IAAIC,KAAK,IAAI;AAC7C,QAAM,CAAEC,UAAF,EAAcC,cAAd,IAAiCP,QAAQ,CAAC,KAAD,CAA/C;AACA,QAAM,CAAEQ,MAAF,EAAUC,SAAV,IAAwBT,QAAQ,EAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,UAAU,GAAG,IAAjB;;AAEA,UAAMC,eAAe,GAAG,YAAY;AAClC,UAAG;AACD,cAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAU,uBAAV,CAAvB;;AACA,YAAGH,UAAH,EAAc;AACZH,UAAAA,cAAc,CAAC,IAAD,CAAd;AACAE,UAAAA,SAAS,CAACG,QAAQ,CAACE,IAAT,CAAcF,QAAf,CAAT;AACD;AACF,OAND,CAMC,OAAMG,GAAN,EAAU;AACT,YAAGA,GAAH,EAAO;AACLC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACH,QAAJ,CAAaE,IAAb,CAAkBI,KAA9B;AACD;AACF;AACF,KAZD;;AAcAP,IAAAA,eAAe;AACf,WAAO,MAAMD,UAAU,GAAG,KAA1B,CAlBc,CAkBmB;AACtC,GAnBY,EAmBX,EAnBW,CAAT;AAqBF,sBACE,oBAAC,eAAD;AAAiB,IAAA,YAAY,EAAEJ,UAA/B;AAA2C,IAAA,MAAM,EAAEE;AAAnD,KAA+DH,KAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAGD,CA5BD;;AA+BA,eAAeF,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst isAuthorized = ComponentToWrap => props => {\r\n    const [ isLoggedIn, setLoginStatus ] = useState(false);\r\n    const [ userID, setUserID ] = useState()\r\n     \r\n    useEffect(() => {\r\n      let isFetching = true\r\n      \r\n      const fetchOnlineUser = async () => {        \r\n        try{\r\n          const response = await axios.get(\"http://localhost/auth\")\r\n          if(isFetching){\r\n            setLoginStatus(true)\r\n            setUserID(response.data.response)\r\n          }\r\n        }catch(err){\r\n          if(err){\r\n            console.log(err.response.data.error)\r\n          }\r\n        }\r\n      }\r\n\r\n      fetchOnlineUser()\r\n      return () => isFetching = false; //unsubscribe\r\n},[])\r\n\r\n  return (\r\n    <ComponentToWrap isAuthorized={isLoggedIn} userID={userID} {...props}/>\r\n  );\r\n}\r\n\r\n\r\nexport default isAuthorized"]},"metadata":{},"sourceType":"module"}